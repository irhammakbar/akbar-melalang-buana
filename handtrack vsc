import cv2
import mediapipe as mp
import serial
import time

# Initialize MediaPipe Hands and Drawing modules
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands()

# Open a video capture object (0 for default camera, change to 1 for external)
cap = cv2.VideoCapture(0)

# Set up serial communication with Arduino
arduino_port = '/dev/cu.usbserial-1130'  # Update this to your Arduino COM port
baud_rate = 115200
arduino = serial.Serial(arduino_port, baud_rate, timeout=1)
time.sleep(2)  # Allow time for the connection to establish

def count_fingers(hand_landmarks, handedness):
    # Landmarks for the tips of the 5 fingers (thumb to pinky)
    finger_tips = [4, 8, 12, 16, 20]
    open_fingers = 0
    
    # Thumb counting based on handedness
    if handedness == "Right":
        if hand_landmarks.landmark[finger_tips[0]].x < hand_landmarks.landmark[3].x:
            open_fingers += 1
    else:
        if hand_landmarks.landmark[finger_tips[0]].x > hand_landmarks.landmark[3].x:
            open_fingers += 1
    
    # Count the other fingers (index, middle, ring, pinky)
    for tip in finger_tips[1:]:
        if hand_landmarks.landmark[tip].y < hand_landmarks.landmark[tip - 2].y:
            open_fingers += 1
    
    return open_fingers

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame")
        break
    
    # Flip the frame and convert it to RGB
    frame = cv2.flip(frame, 1)
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    
    # Detect hands in the frame
    results = hands.process(frame_rgb)
    
    if results.multi_hand_landmarks:
        for hand_landmarks, handedness in zip(results.multi_hand_landmarks, results.multi_handedness):
            hand_type = handedness.classification[0].label
            fingers_open = count_fingers(hand_landmarks, hand_type)
            
            # Draw landmarks on the frame
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            
            # Display the hand type and number of open fingers
            cv2.putText(frame, f'{hand_type} Hand: Fingers: {fingers_open}', 
                        (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA)

            # Send data to Arduino based on the number of open fingers
            arduino.write(f'{fingers_open}\n'.encode()) if 1 <= fingers_open <= 5 else arduino.write(b'0\n')

    # Display the frame
    cv2.imshow('Hand Recognition', frame)
    
    # Exit when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
arduino.close()
