import processing.serial.*; // mengimpor library untuk komunikasi serial
import java.awt.event.KeyEvent; // mengimpor library untuk membaca data dari port serial
import java.io.IOException;
Serial portSaya; // mendefinisikan Objek Serial

// mendefinisikan variabel
String sudut = "";
String jarak = "";
String data = "";
String tidakAdaObjek;
float jarakPiksel;
int sudutInt, jarakInt;
int indeks1 = 0;
int indeks2 = 0;
PFont fontOrc;

void setup() {
  
  size(1080, 720); // ***UBAH INI KE RESOLUSI LAYAR ANDA***
  smooth();
  portSaya = new Serial(this, "/dev/cu.usbserial-1130", 9600); // memulai komunikasi serial
  portSaya.bufferUntil('.'); // membaca data dari port serial hingga karakter '.' ditemukan. Jadi sebenarnya membaca ini: sudut,jarak.
}

void draw() {
  
  fill(98,245,31);
  // mensimulasikan motion blur dan fade lambat pada garis yang bergerak
  noStroke();
  fill(0,4); 
  rect(0, 0, width, height - height * 0.065); 
  
  fill(98,245,31); // warna hijau
  // memanggil fungsi untuk menggambar radar
  gambarRadar(); 
  gambarGaris();
  gambarObjek();
  gambarTeks();
}

void serialEvent(Serial portSaya) { // mulai membaca data dari Port Serial
  // membaca data dari Port Serial hingga karakter '.' dan memasukkannya ke variabel String "data".
  data = portSaya.readStringUntil('.');
  data = data.substring(0, data.length() - 1);
  
  indeks1 = data.indexOf(","); // menemukan karakter ',' dan memasukkannya ke variabel "indeks1"
  sudut = data.substring(0, indeks1); // membaca data dari posisi "0" hingga posisi variabel indeks1, yaitu nilai sudut yang dikirim oleh Board Arduino ke Port Serial
  jarak = data.substring(indeks1 + 1, data.length()); // membaca data dari posisi "indeks1" hingga akhir data, yaitu nilai jarak
  
  // mengonversi variabel String menjadi Integer
  sudutInt = int(sudut);
  jarakInt = int(jarak);
}

void gambarRadar() {
  pushMatrix();
  translate(width / 2, height - height * 0.074); // memindahkan koordinat awal ke lokasi baru
  noFill();
  strokeWeight(2);
  stroke(98,245,31);
  // menggambar garis busur
  arc(0, 0, (width - width * 0.0625), (width - width * 0.0625), PI, TWO_PI);
  arc(0, 0, (width - width * 0.27), (width - width * 0.27), PI, TWO_PI);
  arc(0, 0, (width - width * 0.479), (width - width * 0.479), PI, TWO_PI);
  arc(0, 0, (width - width * 0.687), (width - width * 0.687), PI, TWO_PI);
  // menggambar garis sudut
  line(-width / 2, 0, width / 2, 0);
  line(0, 0, (-width / 2) * cos(radians(30)), (-width / 2) * sin(radians(30)));
  line(0, 0, (-width / 2) * cos(radians(60)), (-width / 2) * sin(radians(60)));
  line(0, 0, (-width / 2) * cos(radians(90)), (-width / 2) * sin(radians(90)));
  line(0, 0, (-width / 2) * cos(radians(120)), (-width / 2) * sin(radians(120)));
  line(0, 0, (-width / 2) * cos(radians(150)), (-width / 2) * sin(radians(150)));
  line((-width / 2) * cos(radians(30)), 0, width / 2, 0);
  popMatrix();
}

void gambarObjek() {
  pushMatrix();
  translate(width / 2, height - height * 0.074); // memindahkan koordinat awal ke lokasi baru
  strokeWeight(9);
  stroke(255,10,10); // warna merah
  jarakPiksel = jarakInt * ((height - height * 0.1666) * 0.025); // mengonversi jarak dari sensor dari cm ke piksel
  // membatasi jangkauan hingga 40 cm
  if(jarakInt < 40){
    // menggambar objek sesuai dengan sudut dan jarak
    line(jarakPiksel * cos(radians(sudutInt)), -jarakPiksel * sin(radians(sudutInt)), 
         (width - width * 0.505) * cos(radians(sudutInt)), 
         -(width - width * 0.505) * sin(radians(sudutInt)));
  }
  popMatrix();
}

void gambarGaris() {
  pushMatrix();
  strokeWeight(9);
  stroke(30,250,60);
  translate(width / 2, height - height * 0.074); // memindahkan koordinat awal ke lokasi baru
  line(0, 0, (height - height * 0.12) * cos(radians(sudutInt)), 
       -(height - height * 0.12) * sin(radians(sudutInt))); // menggambar garis sesuai dengan sudut
  popMatrix();
}

void gambarTeks() { // menggambar teks di layar
  
  pushMatrix();
  if(jarakInt > 40) {
    tidakAdaObjek = "Di Luar Jangkauan";
  } else {
    tidakAdaObjek = "Dalam Jangkauan";
  }
  fill(0,0,0);
  noStroke();
  rect(0, height - height * 0.0648, width, height);
  fill(98,245,31);
  textSize(25);
  
  text("10cm", width - width * 0.3854, height - height * 0.0833);
  text("20cm", width - width * 0.281, height - height * 0.0833);
  text("30cm", width - width * 0.177, height - height * 0.0833);
  text("40cm", width - width * 0.0729, height - height * 0.0833);
  textSize(40);
  text("Kelompok 2 XII.2", width - width * 0.875, height - height * 0.0277);
  text("Sudut: " + sudutInt + " °", width - width * 0.48, height - height * 0.0277);
  text("Jarak: ", width - width * 0.26, height - height * 0.0277);
  if(jarakInt < 40) {
    text("        " + jarakInt + " cm", width - width * 0.225, height - height * 0.0277);
  }
  textSize(25);
  fill(98,245,60);
  translate((width - width * 0.4994) + width / 2 * cos(radians(30)), 
            (height - height * 0.0907) - width / 2 * sin(radians(30)));
  rotate(-radians(-60));
  text("30°", 0, 0);
  resetMatrix();
  translate((width - width * 0.503) + width / 2 * cos(radians(60)), 
            (height - height * 0.0888) - width / 2 * sin(radians(60)));
  rotate(-radians(-30));
  text("60°", 0, 0);
  resetMatrix();
  translate((width - width * 0.507) + width / 2 * cos(radians(90)), 
            (height - height * 0.0833) - width / 2 * sin(radians(90)));
  rotate(radians(0));
  text("90°", 0, 0);
  resetMatrix();
  translate(width - width * 0.513 + width / 2 * cos(radians(120)), 
            (height - height * 0.07129) - width / 2 * sin(radians(120)));
  rotate(radians(-30));
  text("120°", 0, 0);
  resetMatrix();
  translate((width - width * 0.5104) + width / 2 * cos(radians(150)), 
            (height - height * 0.0574) - width / 2 * sin(radians(150)));
  rotate(radians(-60));
  text("150°", 0, 0);
  popMatrix(); 
}
